name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup environment
        run: npm run setup-env
      - name: Prepare dictionary
        run: npm run dictionary
      - name: Run linting
        run: npm run lint

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup environment
        run: npm run setup-env
      - name: Prepare dictionary
        run: npm run dictionary
      - name: Run backend tests
        run: cd apps/backend && npm test
        env:
          NODE_ENV: test
          MONGODB_URI_TEST: mongodb://localhost:27017/word-scramble-test
          JWT_SECRET: test-secret-key

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup environment
        run: npm run setup-env
      - name: Prepare dictionary
        run: npm run dictionary
      - name: Run frontend tests
        run: cd apps/frontend && npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup environment
        run: npm run setup-env
      - name: Prepare dictionary
        run: npm run dictionary
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            apps/frontend/.next
            apps/backend/dist

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    steps:
      - name: Deploy to Vercel
        run: echo "Deployment would happen here"
        # In a real setup, you would use the Vercel GitHub Action
        # - uses: amondnet/vercel-action@v20
        #   with:
        #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
        #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        #     working-directory: ./
        #     vercel-args: '--prod'
